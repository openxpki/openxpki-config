# The name of the file equals the name of the profile
label: OpenXPKI example profile

# Validity of certificates, can be in absolute or relative format
# absolute: YYYYMMDD[HH[MM[SS]]]
# relative +YY[MM[DD[HH[MM[SS]]]]] or -YY[MM[DD[HH[MM[SS]]]]]
# see OpenXPKI::DateTime for more details
validity:
    # notbefore defaults to now if it is omitted
    #notbefore: 20120101000000
    # absolute date or relative to notbefore
    notafter: "+0006"

# digest to use
digest: sha256

# uncomment this to use pss padding, saltlen and mgf1_digest default
# to 32 and sha256 and can be omitted
#padding:
#    mode: pss
#    saltlen: 32
#    mgf1_digest: sha256


# weather the serials must increase and how many bits of the serial are
# made from a random source
increasing_serials: 1
randomized_serial_bytes: 8

# Sets the openssl string_mask attribute, utf8only is the default which
# creates certificates using UTF8STRING for all DN components according
# to RFC2459. Some older implementations expect PRINTABLESTRING for the
# CN/DN which can be enforced by string_mask: nombstr
# string_mask: utf8only

# publish certificates to this connector (as defined at publishing.entity)
publish:
  - ldap

# used when OpenXPKI::Server::Workflow::Activity::Tools::PublishCertificate
# is called in unpublish mode, can be used e.g. to update OCSP on revocation
# or remove certificate from LDAP after expiration.
# It is NOT used by the default workflows today
unpublish:
  - ocsp

# the group attribute can be used to filter the list of profiles
# returned by the get_cert_profiles API call.
# Groups are not used by the default workflows
group:
  - foobar

style:
    00_basic_style:
        label: I18N_OPENXPKI_UI_PROFILE_BASIC_STYLE_LABEL
        description: I18N_OPENXPKI_UI_PROFILE_BASIC_STYLE_DESC
        # Define which input fields you want on the UI
        # Just put their names here and define them at the end
        # in the "template" section.
        # You can also use the template names found in the
        # template.yaml file, if you duplicate a name, the
        # local definition gets precedence.
        ui:
            subject:
                - hostname
                - port
                - ipv4
                - ipv6
            info:
                - requestor_realname
                - requestor_email
                - owner_contact
                - comment

        # Subject is evaluated by template toolkit with the input data from the ui.subject fields
        # Note: Fields which have max > 1 are always passed as array
        subject:
            dn: CN=[% hostname %][% IF port AND port != 443 %]:[% port %][% END %],DC=Test Deployment,DC=OpenXPKI,DC=org
        # You can use the fields from ui.subject here
            san: dns=[% hostname %]
            ip:
             - "[% FOREACH entry = ipv4 %][% entry.lower %] | [% END %]"
             - "[% FOREACH entry = ipv6 %][% entry.lower %] | [% END %]"


        # this is attached to the certificate, all fields from ui can be used
        metadata:
            requestor: "[% requestor_realname %]"
            email: "[% requestor_email %]"
            owner_contact: "[% owner_contact || requestor_email %]"
            entity: "[% hostname FILTER lower %]"

    05_advanced_style:
        label: I18N_OPENXPKI_UI_PROFILE_ADVANCED_STYLE_LABEL
        description: I18N_OPENXPKI_UI_PROFILE_ADVANCED_STYLE_DESC
        ui:
            subject:
                - cn
                - o
                - ou
                - dc
                - locality
                - state
                - c
            san:
                - san_email
                - san_dns
                - san_ipv4
                - san_uri
                - san_rid
            info:
                - requestor_realname
                - requestor_email
                - owner_contact
                - comment

        # Subject is evaluated by template toolkit with the input data from the ui.subject fields
        # Note: Fields which have max > 1 are always passed as array
        subject:
            dn: >
                CN=[% CN %]
                [% IF OU %][% FOREACH entry = OU %],OU=[% entry %][% END %][% END %]
                [% IF O %],O=[% O %][% END %]
                [% FOREACH entry = DC %],DC=[% entry %][% END %]
                [% IF L %],L=[% L %][% END %]
                [% IF ST %],ST=[% ST %][% END %]
                [% IF C %],C=[% C %][% END %]
        # no san definitions are required here as items from ui.san are directly written to the SAN
        # if you add a SAN section here, those are merged with the "direct" sans

        # metadata is the same as above
        metadata:
            requestor: "[% requestor_realname %]"
            email: "[% requestor_email %]"
            owner_contact: "[% owner_contact || requestor_email %]"
            entity: "[% CN FILTER lower %]"

    # A standard template used from the automated enrollment workflows
    enroll:
        subject:
            # All RDNs from the PKCS10 containers DN are avaiable here
            # Items from the SAN section are also available here
            # Note that all items are always arrays, for the SAN the pipe is
            # used as separator character to split individual items later
            dn: CN=[% CN.0 %],DC=Test Deployment,DC=OpenXPKI,DC=org
            san:
                dns: "[% FOREACH entry = SAN_DNS %][% entry.lower %] | [% END %]"
                ip : "[% FOREACH entry = SAN_IP %][% entry %] | [% END %]"

        # metadata source items added via the "params" section of the
        # PersistMetadata action in the workflow are available in data
        # DN/SAN parts are available as defined above
        metadata:
            application_id: "[% data.application_id %]"
            entity: "[% CN.0.replace(':.*','') FILTER lower %]"

        # Consumed by RenderExtensions to add extra extensions
        extension:
            securityIdentifier: '[% ext.sid %]'
            certificateTemplateName: '[% ext.template_name %]'
            certificateTemplate:
              - '[% ext.template.oid %]'
              - '[% ext.template.major %]'
              - '[% ext.template.minor %]'

# Profile extensions - set 0/1 as needed
extensions:
    # Enable this to copy extensions from the CSR to the Certificate
    # THIS MIGHT BE DANGEROUS, see copy_extensions of openssl ca command
    # For security reasons hhis can NOT be set in default.yaml
    #copy: copy

    basic_constraints:
        critical: 1
        ca: 0
        # only relevant with ca = 1
        path_length: 0

    key_usage:
        critical: 1
        digital_signature: 0
        non_repudiation:   0
        key_encipherment:  0
        data_encipherment: 0
        key_agreement:     0
        key_cert_sign:     0
        crl_sign:          0
        encipher_only:     0
        decipher_only:     0

    extended_key_usage:
        critical: 0
        # these are OIDs, some OIDs are known and have names
        client_auth:      0
        server_auth:      0
        email_protection: 0
        code_signing:     0
        time_stamping:    0
        ocsp_signing:     0
        # Any other oid can be given by number
        # MS SmartCard Login
        1.3.6.1.4.1.311.20.2.2: 0


    subject_key_identifier:
        critical: 0
        hash: 1

    authority_key_identifier:
        critical: 0
        keyid:  1
        issuer: 1

    issuer_alt_name:
        critical: 0
        # If the issuer has no subject alternative name, copying returns
        # an empty extension, which is problematic with both RSA SecurId
        # tokens and Cisco devices!
        copy: 0


    crl_distribution_points:
        critical: 0
        # uri can be scalar or list
        uri:
            - http://localhost/cacrl.crt
            - ldap://localhost/cn=[% ISSUER.CN.0 %],dc=OpenXPKI,dc=org

    authority_info_access:
        critical: 0
        # ca_issuers and ocsp can be scalar or list
        ca_issuers: http://localhost/cacert.cer
        ocsp: http://ocsp.openxpki.org/

    policy_identifier:
        critical: 0
        # you can combine both notations but do not use the same OID twice
        # short notation, if you just need OIDs
        oid: 1.2.3.5
        # for OIDs with CPS/Notice, put the OID as key.
        1.2.3.4:
          # CPS/Notice can be scalar or list
          cps:
            - http://openxpki.org/cps.html
            - http://openxpki.net/cps.html
          user_notice: This is a comment for policy oid 1.2.3.4

    # You can add arbitrary oid to extensions, for single line items
    # format, encoding and value are simply concatenated using a colon
    # you can also omit format/encoding and pass the full string as value
    # if the encoding is set to sequence, the value is copied to a section
    # which allows nested items like Microsoft certificateTemplate v2
    oid:
        1.3.6.1.4.1.311.20.2:
            critical: 0
            format: ASN1
            encoding: UTF8String
            value: Machine

        1.3.6.1.4.1.311.21.7:
            critical: 0
            format: ASN1
            encoding: SEQUENCE
            value: |
               field1=OID:1.3.6.1.4.1.311.21.8.15138236.9849362.7818410.4518060.12563386.22.5003942.7882920
               field2=INT:100
               field3=INT:0

    # the ocsp nocheck extension, usually used for OCSP responder certificates
    # the actual value must just be something "true" as the extension has no
    # configurable value. critical is not supported for this extension.
    ocsp_nocheck: 1

    # This extension is deprecated and should not be used unless required
    netscape:
        comment:
            critical: 0
            text: This is a generic certificate. Generated with OpenXPKI trustcenter software.
        certificate_type:
            critical: 0
            ssl_client:        0
            smime_client:      0
            object_signing:    0
            ssl_client_ca:     0
            smime_client_ca:   0
            object_signing_ca: 0

        cdp:
            critical: 0
            # No lists - only one item allowed!
            uri: http://localhost/cacrl.crt
            ca_uri: http://localhost/cacrl.crt
     # end of netscape section
# end of extensions

# Define the input fields you used below here
#template:


