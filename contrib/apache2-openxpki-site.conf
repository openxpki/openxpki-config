# Note: Those settings are part of the general server configuration and
# might be defined somewhere else overwriting the settings made here!

# Note for RewriteRule:
# the [P] flag implies [L] - the request is immediately pushed through the
# proxy, and any following rules will not be considered.

<IfModule mod_ssl.c>
# Disable old TLS versions
SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
# Enforce cipher suite settings that are consdiered to be good.
# Leaves DHE based key exchanges with AES and SHA256+ encryption (+POLY1305/CHACHA).
# You might need to relax this if you need to talk with older clients or resource limited IoT devices - YMMV.
# A good entry point if you are not familiar with this is https://ssl-config.mozilla.org/
SSLCipherSuite HIGH:!NULL:+AES:!CAMELLIA:!SEED:!ARIA:!IDEA:!DES:!3DES:!RC2:!RC4:!PSK:!SHA:!MD5:!RSA:!AESCCM:!DSS:!ADH
</IfModule>

# Some people think it is a risk to expose information about the server.
# This settings reduce the information discolsure to the bare minimum.
# You should also remove any unused modules from the server!
TraceEnable Off
ServerSignature Off
ServerTokens Prod

# Do not work as a forwarding proxy
ProxyRequests Off

# Shortcut to forward Apache environment variables via HTTP headers.
# escape() is neccessary to e.g. transfer certificates without losing linefeeds.
<Macro OxiForwardEnv $key>
    RequestHeader set X-ReverseProxy-ENV-$key "expr=%{base64:%{$key}}" "expr=-n %{$key}"
</Macro>
<Macro OxiPreventInjection $key>
    RequestHeader unset X-ReverseProxy-ENV-$key
</Macro>

Define OxiClientSocket /run/openxpki-clientd/openxpki-clientd.sock

# Preparation for Mojolicious based client services
<IfModule mod_headers.c>
    RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}
    RequestHeader set X-ReverseProxy-ENVSET 1
    RequestHeader set X-ReverseProxy-QueryString "expr=%{base64:%{QUERY_STRING}}"
    # Prevent injection of Apache ENV vars from browser into Mojolicious
    use OxiPreventInjection SSL_CLIENT_S_DN
    use OxiPreventInjection SSL_CLIENT_CERT
</IfModule>

# SCEP + CRL & CA Download
<VirtualHost *:80>

    ServerAlias *
    DocumentRoot /var/www/

    RewriteEngine On

    # SCEP
    <IfVersion >= 2.4.10>
        RequestHeader setifempty Content-Type application/pkcs7 "expr=%{REQUEST_METHOD} == 'POST'"
    </IfVersion>

    RewriteRule "/(scep(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /scep http://localhost/

    # Prevent apache from adding a charset header for SCEP responses.
    # Some clients do not handle this properly :(
    <Location "/scep">
        AddDefaultCharset off
    </Location>

    # Builtin healthcheck
    RewriteRule "/(healthcheck(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /healthcheck http://localhost/

    # Redirect anything else to HTTPS
    RewriteCond %{REQUEST_FILENAME} !scep
    RewriteCond %{REQUEST_FILENAME} !rpc
    RewriteCond %{REQUEST_FILENAME} !download
    RewriteCond %{REQUEST_FILENAME} !healthcheck
    RewriteCond %{REQUEST_FILENAME} !.well-known
    RewriteRule ^.*$ https://%{HTTP_HOST}$1 [L,R=301,NC]

</VirtualHost>

<IfModule mod_ssl.c>
<VirtualHost *:443>

    ServerAlias *
    DocumentRoot /var/www/

    RewriteEngine On

    SSLEngine On
    SSLCertificateFile /etc/openxpki/tls/endentity/openxpki.crt
    SSLCertificateChainFile /etc/openxpki/tls/endentity/openxpki.crt
    SSLCertificateKeyFile /etc/openxpki/tls/private/openxpki.pem

    SSLCACertificatePath /etc/openxpki/tls/chain/
    SSLVerifyClient optional_no_ca
    SSLVerifyDepth 3
    SSLOptions +StdEnvVars +ExportCertData

    # HTTPS specific preparation for Mojolicious based client services
    <IfModule mod_headers.c>
        Use OxiForwardEnv SSL_CLIENT_S_DN
        Use OxiForwardEnv SSL_CLIENT_CERT
    </IfModule>


    # RPC
    RewriteRule "/(rpc(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /rpc http://localhost/

    # Builtin healthcheck
    RewriteRule "/(healthcheck(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /healthcheck https://localhost/

    # EST (RFC7030)
    RewriteRule "/(.well-known/est(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /.well-known/est https://localhost/

    # SimpleCMC (RFC5272 - EE only)
    RewriteRule "/(cmc(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /cmc http://localhost/

    # ACME (RFC8555 - EE only)
    Header set Location expr=%{resp:X-location} "expr=-n %{resp:X-location}"
    RewriteRule "/(acme(/.*)?)$" "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /acme http://localhost/

    # WebUI
    RewriteRule ^/(webui/([a-z0-9-]+)/)cgi-bin/webui.fcgi$ "unix:${OxiClientSocket}|http://localhost/$1" [P]
    ProxyPassReverse /webui http://localhost/

    # Redirect empty path to generic OpenXPKI url - turn off if you have a start page.
    # Use this variant if you have url based realms and want to have an index page.
    RewriteRule ^/$ https://%{HTTP_HOST}/webui/index/ [L,R=301,NC]
    # Use this if you have only a single realm or a drop down.
    #RewriteRule ^/$ https://%{HTTP_HOST}/openxpki/ [L,R=301,NC]

    # Append a trailing slash
    RewriteRule ^/([a-z0-9-]+)$ https://%{HTTP_HOST}/$1/ [L,R=301,NC]

    # Map non existing directories to OpenXPKI application starter
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !(cgi-bin|rpc|acme|cmc|certep|download|healthcheck)
    RewriteRule ^/([a-z0-9-]+)/$ /var/www/openxpki/index.html [L]

    # No access to index page in OpenXPKI subdir
    # RewriteRule ^openxpki/?$ https://%{HTTP_HOST}/ [L,R=301,NC]

    # Map all other resources to the OpenXPKI subdir
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-l
    RewriteCond %{REQUEST_FILENAME} !(cgi-bin|rpc|acme|cmc|certep|download|healthcheck|oidc_redirect)
    RewriteRule ^/(webui/)?([a-z0-9-]+)/(.*) /var/www/openxpki/$3 [L,NC]

    # Set security headers
    <IfModule mod_headers.c>
    Header set Strict-Transport-Security max-age=31536000
    Header set X-Frame-Options deny
    Header set X-XSS-Protection "1; mode=block;"
    </IfModule>

</VirtualHost>
</IfModule>

<Directory "/usr/lib/cgi-bin/">
    AllowOverride None
    Options +ExecCGI
    Order allow,deny
    Allow from all
    Require all granted
</Directory>

<Directory /var/www/>
#    Options FollowSymLinks
#    AllowOverride FileInfo
    Require all granted
</Directory>
